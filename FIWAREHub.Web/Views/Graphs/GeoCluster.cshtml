@model FIWAREHub.Models.WebModels.ViewModels.GeoClusterViewModel


@{
    Layout = null;
}

<script src='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />

<script src="https://d3js.org/d3.v6.min.js"></script>
<script src="https://unpkg.com/deck.gl@latest/dist.min.js"></script>

<style scoped="">
    body {
        width: 100vw;
        height: 100vh;
        margin: 0;
    }
/*
    #control-panel {
        font-family: Helvetica, Arial, sans-serif;
        position: absolute;
        background: #fff;
        top: 0;
        left: 0;
        margin: 12px;
        padding: 20px;
        z-index: 1;
    }

    label {
        display: inline-block;
        width: 140px;
    }*/
</style>

<div id="control-panel">
    <div>
        <label>Radius</label>
        <input id="radius" type="range" min="1000" max="20000" step="1000" value="1000"></input>
        <span id="radius-value"></span>
    </div>
    <div>
        <label>Coverage</label>
        <input id="coverage" type="range" min="0" max="1" step="0.1" value="1"></input>
        <span id="coverage-value"></span>
    </div>
    <div>
        <label>Upper Percentile</label>
        <input id="upperPercentile" type="range" min="90" max="100" step="1" value="100"></input>
        <span id="upperPercentile-value"></span>
    </div>
</div>

<script type="text/javascript">
    const deckgl = new deck.DeckGL({
        mapboxApiAccessToken: 'pk.eyJ1IjoidWJlcmRhdGEiLCJhIjoiY2pudzRtaWloMDAzcTN2bzN1aXdxZHB5bSJ9.2bkj3IiRC8wj3jLThvDGdA',
        mapStyle: 'mapbox://styles/mapbox/dark-v9',
        initialViewState: {
            longitude: -119.417931,
            latitude: 36.778259,
            zoom: 6,
            minZoom: 4,
            maxZoom: 15,
            pitch: 20
        },
        controller: true
    });

    const data = d3.json('/graphs/getaccidentdata?year=@Model.Year&quarter=@Model.Quarter&state=@Model.State');
    
    

    const OPTIONS = ['radius', 'coverage', 'upperPercentile'];

    const COLOR_RANGE = [
        [1, 152, 189],
        [73, 227, 206],
        [216, 254, 181],
        [254, 237, 177],
        [254, 173, 84],
        [209, 55, 78]
    ];

    OPTIONS.forEach(key => {
        document.getElementById(key).oninput = renderLayer;
    });

    renderLayer();

    function renderLayer () {
        const options = {};
        OPTIONS.forEach(key => {
            const value = +document.getElementById(key).value;
            document.getElementById(key + '-value').innerHTML = value;
            options[key] = value;
        });

        //const scatterplotLayer = new deck.ScatterplotLayer({
        //    id: 'scatterplot-layer',
        //    accidentLocations,
        //    colorRange: COLOR_RANGE,
        //    pickable: true,
        //    opacity: 0.8,
        //    stroked: true,
        //    filled: true,
        //    radiusScale: 6,
        //    radiusMinPixels: 1,
        //    radiusMaxPixels: 100,
        //    lineWidthMinPixels: 1,
        //    getPosition: d => [d.longitude, d.longitude],
        //    getFillColor: d => [255, 140, 0],
        //    getLineColor: d => [0, 0, 0]
        //});

        //const ICON_MAPPING = {
        //    marker: {x: 0, y: 0, width: 128, height: 128, mask: true}
        //};

        //const iconLayer = new deck.IconLayer({
        //    id: 'icon-layer',
        //    clusterData,
        //    pickable: true,
        //    // iconAtlas and iconMapping are required
        //    // getIcon: return a string
        //    iconAtlas: '/img/icon-atlas.png',
        //    iconMapping: ICON_MAPPING,
        //    getIcon: d => 'marker',

        //    sizeScale: 15,
        //    getPosition: d => [d.longitude, d.latitude],
        //    getSize: d => 5,
        //    getColor: d => [0, 140, 0]
        //});

        const hexagonLayer = new deck.HexagonLayer({
            id: 'heatmap',
            colorRange: COLOR_RANGE,
            data,
            elevationRange: [0, 1000],
            elevationScale: 250,
            extruded: true,
            getPosition: d => [d.longitude, d.latitude],
            opacity: 1,
            ...options
        });

        deckgl.setProps({
            layers: [hexagonLayer],
            //tooltip:
        });
    }

</script>