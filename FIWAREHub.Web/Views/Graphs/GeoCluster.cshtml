@model FIWAREHub.Models.WebModels.ViewModels.GeoClusterViewModel

@{
    Layout = null;
    double longitude = 0;
    double latitude = 0;
    if (Model.State == "CA")
    {
        longitude = -119.417931;
        latitude = 36.778259;
    }
    // TX
    else
    {
        longitude = -99.9018;
        latitude = 31.9686;
    }
}


<link href='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css' rel='stylesheet' />

<style scoped="">
    body {
        width: 100vw;
        height: 100vh;
        margin: 0;
    }

    #container {
        width: 100%;
        height: 100%;
    }
</style>

<div id="container"></div>

<script src='https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js'></script>
<script src="https://d3js.org/d3.v6.min.js"></script>
<script src="https://unpkg.com/deck.gl@latest/dist.min.js"></script>

<script type="text/javascript">
    const deckgl = new deck.DeckGL({
        container: "container",
        mapboxApiAccessToken: 'pk.eyJ1IjoidWJlcmRhdGEiLCJhIjoiY2pudzRtaWloMDAzcTN2bzN1aXdxZHB5bSJ9.2bkj3IiRC8wj3jLThvDGdA',
        mapStyle: 'mapbox://styles/mapbox/dark-v9',
        initialViewState: {
            longitude: @longitude,
            latitude: @latitude,
            zoom: 6,
            minZoom: 4,
            maxZoom: 15,
            pitch: 20
        },
        controller: true
    });

    const accidentData = d3.json('/graphs/getaccidentdata/@Model.State/@Model.Year/@Model.Quarter');
    const clusterData = d3.json('/graphs/getclusterdata/@Model.State/@Model.Year/@Model.Quarter');

    const COLOR_RANGE = [
        [1, 152, 189],
        [73, 227, 206],
        [216, 254, 181],
        [254, 237, 177],
        [254, 173, 84],
        [209, 55, 78]
    ];

    const ICON_MAPPING = {
        marker: {x: 0, y: 0, width: 128, height: 128, mask: true}
    };

    renderLayer();

    function renderLayer () {
        const scatterplotLayer = new deck.ScatterplotLayer({
            id: 'scatterplot-layer',
            data: accidentData,
            pickable: true,
            opacity: 0.3,
            stroked: true,
            filled: true,
            radiusScale: 2,
            radiusMinPixels: 1,
            radiusMaxPixels: 100,
            lineWidthMinPixels: 1,
            getPosition: d => [d.longitude, d.latitude],
            getFillColor: d => [0, 122, 135, 120],
            getLineColor: d => [0, 122, 135, 120],
            getRadius: d => 5
        });


        const iconLayer = new deck.IconLayer({
            id: 'icon-layer',
            data: clusterData,
            pickable: true,
            autoHighlight: true,
            // iconAtlas and iconMapping are required
            // getIcon: return a string
            iconAtlas: '/img/icon-atlas.png',
            iconMapping: ICON_MAPPING,
            getIcon: d => 'marker',
            alphaCutoff: 0.2,
            sizeScale: 15,
            getPosition: d => [d.longitude, d.latitude],
            getSize: d => 5,
            getColor: d => [178, 34, 34]
        });

        const hexagonLayer = new deck.HexagonLayer({
            id: 'heatmap',
            colorRange: COLOR_RANGE,
            data: accidentData,
            elevationRange: [0, 1000],
            elevationScale: 250,
            extruded: true,
            getPosition: d => [d.longitude, d.latitude],
            opacity: 1,
            upperPercentile: 100,
            radius: 1000,
            coverage: 1
        });

        deckgl.setProps({
            layers: [iconLayer, scatterplotLayer],
            //tooltip:
        });
    }
</script>